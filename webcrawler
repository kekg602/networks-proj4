#!/usr/bin/python

import sys
import socket
import HTMLParser

# Default port
PORT = 80

# Host to connect to
FAKEBOOK_HOST = "fring.ccs.neu.edu"

# Main domain
REQUIRED_DOMAIN = "http://fring.ccs.neu.edu"

# Keep track of csrf token for login
csrfToken = ""

# Setup get requests
def setupGetRequest(path):
	global setCookie
	
	cookie = ""
	for c in setCookie:
		if cookie != "":
			cookie = cookie + ";"
		cookie = cookie + " " + c
	
	if (len(setCookie) == 0):
		request = "GET " + path + " HTTP/1.1 \r\nHost: " + FAKEBOOK_HOST + "\r\n\r\n"
	else:
		request = "GET " + path + " HTTP/1.1 \r\nHost: " + FAKEBOOK_HOST + " \r\nCookie: " + cookie + "\r\n\r\n"
	
	print request	
        return request
		
# Setup the post request to login
def setupLoginRequest():
	global csrfToken
	global setCookie

	cookieString = ""
	for c in setCookie:
		if cookieString != "":
			cookieString = cookieString + ";"
		cookieString = cookieString + " " + c

	request = "POST /accounts/login/ HTTP/1.1 \r\nHost: " + FAKEBOOK_HOST + "\r\nContent-Length: 109\r\nAccept: text/html,application/xhtml+xml,application/xml;q=0.9,image/webp,*/*;q=0.8\r\nOrigin: http://fring.ccs.neu.edu\r\nCookie: " + cookieString +"\r\nUpgrade-Insecure-Requests: 1\r\nContent-Type: application/x-www-form-urlencoded\r\nDNT: 1\r\nReferer: http://fring.ccs.neu.edu/accounts/login/\r\nAccept-Encoding: gzip, deflate\r\nAccept-Language: en-US,en;q=0.8\r\n\r\nusername=" + username + "&password=" + password + "&csrfmiddlewaretoken=" + csrfToken + "&next=%2Ffakebook%2F\r\n"
	
	return request

# Get the response
def getResponse(sock):
	fullResponse = ""; 
	while True:
		response = sock.recv(1500)

                if not response:
                       break;
                else:
                       fullResponse = fullResponse + response

	return fullResponse
	
# Get the status from the response
def getStatus(response):
	# Get each line of the response
	lines = response.split("\r\n")

	# The first line gives status information
	# the second param is the status information
	initLine = lines[0].split()

	if initLine[0] == "HTTP/1.1":
		status = str(initLine[1])

	return status
		
# Go through the html and look for more
# URLs as well as the secret flags
def handleOkStatus(response):
	global setCookie
	isChunked = False

	# Get the message body
	lines = response.split("\r\n")
	
	# Check the Header lines for cookies if we don't
	# have them yet and whether or not it is chunked
	for l in lines:
		headerInfo = l.split(":")
		if headerInfo[0] == "Set-Cookie":
			cookie = headerInfo[1].split(";")
			setCookie.append(cookie[0])
		elif headerInfo[0] == "Transfer-Encoding":
			if headerInfo[1] == " chunked":
				isChunked = True

	if (isChunked):
		for l in lines:
			if l == "0":
				index = lines.index(l) - 1
				print "IT'S A ZERO"
				body = lines[index]
				print body
	else:
		body = lines[-1]
	
	# Parse through it looking for key items
	parser = PyHtmlParser()
	parser.feed(body)
	
# Go through the response and add the
# new location to the list of urls
def handleRedirectStatus(response):
	global unvisitedUrls
	global setCookie

	setCookie = []

	lines = response.split("\r\n")
	
	# Find location and set cookie header
	for l in lines:
		lineDetails = l.split(" ")
		if lineDetails[0] == "Location:":
			unvisitedUrls.append(lineDetails[1])
	 	elif lineDetails[0] == "Set-Cookie:":
			cookie = lineDetails[1].split(";")
			setCookie.append(cookie[0])
			
								
# Check starter tags for certain attributes
def checkAttributes(key, value, attrs):
	for attr in attrs:
		if attr[0] == key and (attr[1] == value or value == ""):
			return True
			
	return False

# Get an attribute value
def getStartTagAttributeValue(value, attrs):
	for attr in attrs:
		if attr[0] == value:
			return attr[1]

# Print the found flags
def printSecretFlags():
	global secretFlags
	for flag in secretFlags:
		print flag + "\n"

# Check if the url we found is one we need to
# crawl or not (if it begins with http://fring.ccs.neu.edu)
# return true if yes false, if no
def validateURL(url):
	global REQUIRED_DOMAIN

	if REQUIRED_DOMAIN in url:
		return True
	else:
		return False

# Set the CSRF token
def setCsrf(token):
	global csrfToken
	csrfToken = token
	#print "Setting token :" + csrfToken

# Handle html parsing
class PyHtmlParser(HTMLParser.HTMLParser):
	global unvisitedUrls
	global secretFlags
	global unvisited
	global isLastStartTagFlag

	isLastStartTagFlag = False

	def handle_starttag(self, tag, attrs):
		#print "Encountered a start tag:", tag

		# Check for csrf value
		# If found, store it to use for login
		if tag == "input":
			if (checkAttributes("type", "hidden", attrs)) and (checkAttributes("name", "csrfmiddlewaretoken", attrs)) and (checkAttributes("value", "", attrs)):
				setCsrf(getStartTagAttributeValue("value", attrs))

		# Check for URLs
		# If one is found add it to unvisitedUrls list
		if tag == "a":
			if (checkAttributes("href", "", attrs)):
				unvisited = str(getStartTagAttributeValue("href", attrs))
				print "Link Found: " + unvisited 
				unvisitedUrls.append(unvisited)

		# Check for secret flags. 
		# If one is found add it to the secretFlags list 
		if tag == "h2":
			if checkAttributes("class", "secret_flag", attrs) and checkAttributes("style", "color:red", attrs):
				print "Found flag start tag"						
				isLastStartTagFlag = True
				secretFlags.append(attrs[1])

	def handle_endtag(self, tag):
       	#print "Encountered an end tag :", tag
		temp = "doing something here to make it happy"

	def handle_data(self, data):
       	#print "Encountered some data  :", data
		if isLastStartTagFlag:
			print "This data is a flag"

# Get the user's username and password
# for fakebook
username = sys.argv[1];
password = sys.argv[2];

# URLs to search
unvisitedUrls = []
unvisitedUrls.append("http://fring.ccs.neu.edu/accounts/login/?next=/fakebook/")

# Visited URLs
visitedUrls = []

# Current URL that is being requested
currentURL = ""

# Secret flags to find and print at end
secretFlags = []

# Keep track of set cookie values
setCookie = []

# Number of unvisited urls there are
numUnvisitedUrls = len(unvisitedUrls)

# Keep track of response from a request
fullResponse = ""

# Keep track if last start tag signifies a flag
isLastStartTagFlag = False

# Booleans for login sequence
loggedIn = False
postRequest = False

# While more urls to go through
while numUnvisitedUrls > 0:
	
	for x in unvisitedUrls:
		currentURL = x
		break;
	
	# if we have already visited this url
	# remove it and move on to the next
	if currentURL in visitedUrls:
		unvisitedUrls.remove(currentURL)
	
	# Check to make sure it is a link we need to check
	# meaning is from domain fring.ccs.neu.edu
	elif (not validateURL(currentURL)):
		unvisitedUrls.remove(currentURL)

	else:	
		# create a TCP socket
		sock = socket.socket(socket.AF_INET, socket.SOCK_STREAM)

		# connect to fakebook
		server_address = (FAKEBOOK_HOST, PORT)
		sock.connect(server_address)
		
		if (not postRequest):
			# send GET request to fakebook
			message = setupGetRequest(currentURL)
		elif (postRequest):
			# send POST request to fakebook to login
			message = setupLoginRequest()
			
		sock.send(message)

		# get full response
		fullResponse = getResponse(sock)
	
		# print response
		print fullResponse

		# get the status code and handle each
		status = getStatus(fullResponse)
	
		# check the response after trying to login
		# if we got a 2xx or 3xx response then success
		if (postRequest and int(status) < 400):
			loggedIn = True
			postRequest = False
	
		# OK, 200 - parse response
		if int(status) == 200:
			handleOkStatus(fullResponse)
			
			# if we are not logged in yet, do this process
			if (not loggedIn):
				postRequest = True
				
		# Moved permanently, 301 - request new location
		elif int(status) >= 300 and int(status) < 400:
			handleRedirectStatus(fullResponse)
	
		# As long as the url does not need to be requested again
		# (any status except 500 including 403 and 404)
		# remove it from the unvisited list
		if int(status) != 500 and loggedIn:
			visitedUrls.append(currentURL)
	    		unvisitedUrls.remove(currentURL)
		
	# Update the number of urls left to visit
	numUnvisitedUrls = len(unvisitedUrls)
	#print numUnvisitedUrls

printSecretFlags()

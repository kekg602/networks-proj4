#!/usr/bin/python

import sys
import socket
import HTMLParser

# Default port
PORT = 80

# Host to connect to
FAKEBOOK_HOST = "fring.ccs.neu.edu"
LOGIN_URL = "/accounts/login/?next=/fakebook/"

# Setup get requests
def setupGetRequest(path):
        request = "GET " + path + " HTTP/1.1 \r\nHost: " + FAKEBOOK_HOST + "\r\n\r\n"
        return request
		
# Setup the post request to login
def setupLoginRequest():
	global csrfToken
	global setCookie

	cookieString = ""
	for c in setCookie:
		if cookieString != "":
			cookieString = cookieString + ";"
		cookieString = cookieString + " " + c

	print "Cookie string" + cookieString

	request = "POST /accounts/login/ HTTP/1.1 \r\nHost: " + FAKEBOOK_HOST + "\r\nCookie: " + cookieString +"\r\n\r\nusername=" + username + "&password=" + password + "&csrfmiddlewaretoken=" + csrfToken + "&next=/fakebook/\r\n"
	print request
	return request

# Get the response
def getResponse(sock):
	fullResponse = ""
	while True:
		response = sock.recv(1500)

                if not response:
                       break;
                else:
                       fullResponse = fullResponse + response

	return fullResponse
	
# Get the status from the response
def getStatus(response):
	# Get each line of the response
	lines = response.split("\r\n")

	# The first line gives status information
	# the second param is the status information
	initLine = lines[0].split()

	if initLine[0] == "HTTP/1.1":
		status = str(initLine[1])

	return status
		
# Go through the html and look for more
# URLs as well as the secret flags
def handleOkStatus(response):
	global setCookie

	# Get the message body
	lines = response.split("\r\n")

	# Get cookies
	for l in lines:
		headerInfo = l.split(":")
		if headerInfo[0] == "Set-Cookie":
			cookie = headerInfo[1].split(";")
			print "COOKIE INFO " + cookie[0]
			setCookie.append(cookie[0])

	body = lines[-1]

	# Parse through it looking for key items
	parser = PyHtmlParser()
	parser.feed(body)
	
# Go through the response and add the
# new location to the list of urls
def handleRedirectStatus(response):
	lines = response.split("\r\n")
	
	print "Redirect"

	# Find location header
	for l in lines:
		linesDetails = l.split(":")
		if lineDetails[0] == "Location":
			print "Redirect function"
			
# Check starter tags for certain attributes
def checkAttributes(key, value, attrs):
	for attr in attrs:
		if attr[0] == key and (attr[1] == value or value == ""):
			return True
			
	return False

# Get an attribute value
def getStartTagAttributeValue(value, attrs):
	global csrfToken

	for attr in attrs:
		if attr[0] == value:
			if value == "value":
				csrfToken = attr[1]
				print "Setting token :" + csrfToken

			return attr[1]

# Print the found flags
def printSecretFlags():
	global secretFlags
	for flag in secretFlags:
		print flag + "\n"

def setCsrf(token):
	global csrfToken
	csrfToken = token
	print "Setting token :" + csrfToken

# Handle html parsing
class PyHtmlParser(HTMLParser.HTMLParser):
	#global unvisitedUrls
	#global secretFlags
	global isLastStartTagFlag

	isLastStartTagFlag = False

	def handle_starttag(self, tag, attrs):
		#print "Encountered a start tag:", tag

		# Check for csrf value
		# If found, store it to use for login
		if tag == "input":
			if (checkAttributes("type", "hidden", attrs)) and (checkAttributes("name", "csrfmiddlewaretoken", attrs)) and (checkAttributes("value", "", attrs)):
				csrfToken = getStartTagAttributeValue("value", attrs)

		# Check for URLs
		# If one is foun add it to unvisitedUrls list
		if tag == "a":
			if (checkAttributes("href", "", attrs)):
				print "Link found"
				#unvisitedUrls.append(attr[1])

		# Check for secret flags
		if tag == "h2":
			if checkAttributes("class", "secret_flag", attrs) and checkAttributes("style", "color:red", attrs):
				print "Found flag start tag"						
				isLastStartTagFlag = True

	def handle_endtag(self, tag):
       	#print "Encountered an end tag :", tag
		temp = "doing something here to make it happy"

	def handle_data(self, data):
       	#print "Encountered some data  :", data
		if isLastStartTagFlag:
			print "This data is a flag"

# Get the user's username and password
# for fakebook
username = sys.argv[1];
password = sys.argv[2];

# create a TCP socket
sock = socket.socket(socket.AF_INET, socket.SOCK_STREAM)

# connect to fakebook
server_address = (FAKEBOOK_HOST, PORT)
sock.connect(server_address)

# URLs to search
unvisitedUrls = []
#unvisitedUrls.append("/accounts/login/?next=/fakebook/")

# Visited URLs
visitedUrls = []

# Current URL that is being requested
currentURL = ""

# Secret flags to find and print at end
secretFlags = []

# Keep track of set cookie values
setCookie = []

# Number of unvisited urls there are
numUnvisitedUrls = len(unvisitedUrls)

# Keep track of response from a request
fullResponse = ""

# Keep track if last start tag signifies a flag
isLastStartTagFlag = False

# Keep track of csrf token for login
csrfToken = ""

# Handle login:
loggedIn = False
while not loggedIn:
	currentURL = LOGIN_URL

	# send GET request to fakebook
	message = setupGetRequest(currentURL)
	sock.send(message)

	# get full response
	fullResponse = getResponse(sock)
	print fullResponse	

	# get the status code
	status = getStatus(fullResponse)
	
	# OK, 200 - parse response
	if int(status) == 200:
		handleOkStatus(fullResponse)
	
	# connect to fakebook
	sock = socket.socket(socket.AF_INET, socket.SOCK_STREAM)
	server_address = (FAKEBOOK_HOST, PORT)
	sock.connect(server_address)

	message = setupLoginRequest()
	sock.send(message)
		
	fullResponse = getResponse(sock)
	print "TRIED LOGIN " + fullResponse
		
	loggedIn = True

# While more urls to go through
while numUnvisitedUrls > 0:
	
	currentURL = unvisitedUrls[0]
	
	# Check to make sure it is a link we need to check
	# meaning is from domain fring.ccs.neu.edu
	
	# if we have already visited this url
	# remove it and move on to the next
	if currentURL in visitedUrls:
		unvisitedUrls.remove(currentURL)
		
	else:	
		# send GET request to fakebook
		message = setupGetRequest(currentURL)
		sock.send(message)

		# get full response
		fullResponse = getResponse(sock)
	
		# print response
		#print fullResponse

		# get the status code and handle each
		status = getStatus(fullResponse)
	
		# OK, 200 - parse response
		if int(status) == 200:
			handleOkStatus(fullResponse)
		# Moved permanently, 301 - request new location
		elif int(status) >= 300 and status < 400:
			handleRedirectStatus(fullResponse)
	
		# As long as the url does not need to be requested again
		# (any status except 500 including 403 and 404)
		# remove it from the unvisited list
		if int(status) != 500:
			visitedUrls = visitedUrls.append(currentURL)
	    		unvisitedUrls.remove(currentURL)
		
	
	# Update the number of urls left to visit
	numUnvisitedUrls = len(unvisitedUrls)

printSecretFlags()
